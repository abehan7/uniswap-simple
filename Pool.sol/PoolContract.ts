/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface PoolContractInterface extends utils.Interface {
  functions: {
    "XtoY(uint256)": FunctionFragment;
    "YtoX(uint256)": FunctionFragment;
    "balances()": FunctionFragment;
    "createPool(uint256,uint256,uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "isDepleted()": FunctionFragment;
    "k()": FunctionFragment;
    "poolCoinSupply()": FunctionFragment;
    "price()": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "XtoY"
      | "YtoX"
      | "balances"
      | "createPool"
      | "deposit"
      | "isDepleted"
      | "k"
      | "poolCoinSupply"
      | "price"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "XtoY",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "YtoX",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "balances", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDepleted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "k", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolCoinSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "XtoY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "YtoX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isDepleted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "k", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolCoinSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface PoolContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PoolContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    XtoY(
      xDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    YtoX(
      yDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    createPool(
      _rx: PromiseOrValue<BigNumberish>,
      _ry: PromiseOrValue<BigNumberish>,
      _ps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isDepleted(overrides?: CallOverrides): Promise<[boolean]>;

    k(overrides?: CallOverrides): Promise<[BigNumber]>;

    poolCoinSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      pc: PromiseOrValue<BigNumberish>,
      feeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  XtoY(
    xDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  YtoX(
    yDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  createPool(
    _rx: PromiseOrValue<BigNumberish>,
    _ry: PromiseOrValue<BigNumberish>,
    _ps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isDepleted(overrides?: CallOverrides): Promise<boolean>;

  k(overrides?: CallOverrides): Promise<BigNumber>;

  poolCoinSupply(overrides?: CallOverrides): Promise<BigNumber>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    pc: PromiseOrValue<BigNumberish>,
    feeRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    XtoY(
      xDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    YtoX(
      yDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balances(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    createPool(
      _rx: PromiseOrValue<BigNumberish>,
      _ry: PromiseOrValue<BigNumberish>,
      _ps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    isDepleted(overrides?: CallOverrides): Promise<boolean>;

    k(overrides?: CallOverrides): Promise<BigNumber>;

    poolCoinSupply(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      pc: PromiseOrValue<BigNumberish>,
      feeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;
  };

  filters: {};

  estimateGas: {
    XtoY(
      xDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    YtoX(
      yDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balances(overrides?: CallOverrides): Promise<BigNumber>;

    createPool(
      _rx: PromiseOrValue<BigNumberish>,
      _ry: PromiseOrValue<BigNumberish>,
      _ps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isDepleted(overrides?: CallOverrides): Promise<BigNumber>;

    k(overrides?: CallOverrides): Promise<BigNumber>;

    poolCoinSupply(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      pc: PromiseOrValue<BigNumberish>,
      feeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    XtoY(
      xDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    YtoX(
      yDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balances(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPool(
      _rx: PromiseOrValue<BigNumberish>,
      _ry: PromiseOrValue<BigNumberish>,
      _ps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isDepleted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    k(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolCoinSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      pc: PromiseOrValue<BigNumberish>,
      feeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
